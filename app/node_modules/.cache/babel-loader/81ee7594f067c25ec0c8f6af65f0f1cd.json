{"ast":null,"code":"import jsSHA from \"jssha\";\nimport qs from \"querystring\";\nconst apiRoot = \"https://ptx.transportdata.tw/MOTC/\";\nconst VERSION = \"v2\";\n\nconst getAuthorizationHeader = () => {\n  let AppID = \"e28b58a56e754b039fa7f8e5d5e08d0d\";\n  let AppKey = \"PxDDf1UhKahsFBy2hzOQD312tRk\";\n  let GMTString = new Date().toGMTString();\n  let ShaObj = new jsSHA(\"SHA-1\", \"TEXT\");\n  ShaObj.setHMACKey(AppKey, \"TEXT\");\n  ShaObj.update(\"x-date: \" + GMTString);\n  let HMAC = ShaObj.getHMAC(\"B64\");\n  let Authorization = 'hmac username=\"' + AppID + '\", algorithm=\"hmac-sha1\", headers=\"x-date\", signature=\"' + HMAC + '\"';\n  return {\n    Authorization: Authorization,\n    \"X-Date\": GMTString\n  };\n};\n\nconst requestAPI = function () {\n  let path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  let param = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return fetch(`${apiRoot}${VERSION}${path}?${qs.stringify(param)}`, {\n    method: \"GET\",\n    headers: getAuthorizationHeader()\n  }).then(async response => {\n    if (!response.ok) {\n      const errorMsg = await response.json().then(msg => msg.Message); // alert\n\n      throw errorMsg;\n    }\n\n    return response.json();\n  }).then(data => data);\n};\n\nexport default requestAPI;\nexport const requesScenicSpot = (city, param) => {\n  //觀光景點\n  const ScenicSpotPath = \"/Tourism/ScenicSpot\";\n\n  if (!city) {\n    return requestAPI(ScenicSpotPath, param);\n  }\n\n  return requestAPI(`${ScenicSpotPath}/${city}`, param);\n};\nexport const requesRestaurant = (city, param) => {\n  //餐廳\n  const RestaurantPath = \"/Tourism/Restaurant\";\n\n  if (!city) {\n    return requestAPI(RestaurantPath, param);\n  }\n\n  return requestAPI(`${RestaurantPath}/${city}`, param);\n};\nexport const requesActivity = (city, param) => {\n  //餐廳\n  const ActivityPath = \"/Tourism/Activity\";\n\n  if (!city) {\n    return requestAPI(ActivityPath, param);\n  }\n\n  return requestAPI(`${ActivityPath}/${city}`, param);\n};","map":{"version":3,"sources":["/Users/chienyoushan/Desktop/33/myapp/src/controller/apiManager.js"],"names":["jsSHA","qs","apiRoot","VERSION","getAuthorizationHeader","AppID","AppKey","GMTString","Date","toGMTString","ShaObj","setHMACKey","update","HMAC","getHMAC","Authorization","requestAPI","path","param","fetch","stringify","method","headers","then","response","ok","errorMsg","json","msg","Message","data","requesScenicSpot","city","ScenicSpotPath","requesRestaurant","RestaurantPath","requesActivity","ActivityPath"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,aAAf;AAEA,MAAMC,OAAO,GAAG,oCAAhB;AACA,MAAMC,OAAO,GAAG,IAAhB;;AAEA,MAAMC,sBAAsB,GAAG,MAAM;AACjC,MAAIC,KAAK,GAAG,kCAAZ;AACA,MAAIC,MAAM,GAAG,6BAAb;AACA,MAAIC,SAAS,GAAG,IAAIC,IAAJ,GAAWC,WAAX,EAAhB;AACA,MAAIC,MAAM,GAAG,IAAIV,KAAJ,CAAU,OAAV,EAAmB,MAAnB,CAAb;AACAU,EAAAA,MAAM,CAACC,UAAP,CAAkBL,MAAlB,EAA0B,MAA1B;AACAI,EAAAA,MAAM,CAACE,MAAP,CAAc,aAAaL,SAA3B;AACA,MAAIM,IAAI,GAAGH,MAAM,CAACI,OAAP,CAAe,KAAf,CAAX;AACA,MAAIC,aAAa,GACb,oBACAV,KADA,GAEA,yDAFA,GAGAQ,IAHA,GAIA,GALJ;AAMA,SAAO;AAAEE,IAAAA,aAAa,EAAEA,aAAjB;AAAgC,cAAUR;AAA1C,GAAP;AACH,CAfD;;AAkBA,MAAMS,UAAU,GAAG,YAA2B;AAAA,MAA1BC,IAA0B,uEAAnB,EAAmB;AAAA,MAAfC,KAAe,uEAAP,EAAO;AAC1C,SAAOC,KAAK,CAAE,GAAEjB,OAAQ,GAAEC,OAAQ,GAAEc,IAAK,IAAGhB,EAAE,CAACmB,SAAH,CAAaF,KAAb,CAAoB,EAApD,EAAuD;AACjEG,IAAAA,MAAM,EAAE,KADyD;AAEjEC,IAAAA,OAAO,EAAElB,sBAAsB;AAFkC,GAAvD,CAAL,CAIJmB,IAJI,CAIC,MAAOC,QAAP,IAAoB;AACxB,QAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AAChB,YAAMC,QAAQ,GAAG,MAAMF,QAAQ,CAACG,IAAT,GAAgBJ,IAAhB,CAAsBK,GAAD,IAASA,GAAG,CAACC,OAAlC,CAAvB,CADgB,CAEhB;;AACA,YAAMH,QAAN;AACD;;AACD,WAAOF,QAAQ,CAACG,IAAT,EAAP;AACD,GAXI,EAYJJ,IAZI,CAYEO,IAAD,IAAUA,IAZX,CAAP;AAaD,CAdH;;AAgBA,eAAed,UAAf;AAEA,OAAO,MAAMe,gBAAgB,GAAG,CAACC,IAAD,EAAOd,KAAP,KAAiB;AAAE;AAC/C,QAAMe,cAAc,GAAG,qBAAvB;;AAEA,MAAI,CAACD,IAAL,EAAW;AACP,WAAOhB,UAAU,CAACiB,cAAD,EAAiBf,KAAjB,CAAjB;AACH;;AACD,SAAOF,UAAU,CAAE,GAAEiB,cAAe,IAAGD,IAAK,EAA3B,EAA8Bd,KAA9B,CAAjB;AACH,CAPM;AASP,OAAO,MAAMgB,gBAAgB,GAAG,CAACF,IAAD,EAAOd,KAAP,KAAiB;AAAE;AAC/C,QAAMiB,cAAc,GAAG,qBAAvB;;AAEA,MAAI,CAACH,IAAL,EAAW;AACP,WAAOhB,UAAU,CAACmB,cAAD,EAAiBjB,KAAjB,CAAjB;AACH;;AACD,SAAOF,UAAU,CAAE,GAAEmB,cAAe,IAAGH,IAAK,EAA3B,EAA8Bd,KAA9B,CAAjB;AACH,CAPM;AASP,OAAO,MAAMkB,cAAc,GAAG,CAACJ,IAAD,EAAOd,KAAP,KAAiB;AAAE;AAC7C,QAAMmB,YAAY,GAAG,mBAArB;;AAEA,MAAI,CAACL,IAAL,EAAW;AACP,WAAOhB,UAAU,CAACqB,YAAD,EAAenB,KAAf,CAAjB;AACH;;AACD,SAAOF,UAAU,CAAE,GAAEqB,YAAa,IAAGL,IAAK,EAAzB,EAA4Bd,KAA5B,CAAjB;AACH,CAPM","sourcesContent":["import jsSHA from \"jssha\";\nimport qs from \"querystring\";\n\nconst apiRoot = \"https://ptx.transportdata.tw/MOTC/\";\nconst VERSION = \"v2\";\n\nconst getAuthorizationHeader = () => {\n    let AppID = \"e28b58a56e754b039fa7f8e5d5e08d0d\";\n    let AppKey = \"PxDDf1UhKahsFBy2hzOQD312tRk\";\n    let GMTString = new Date().toGMTString();\n    let ShaObj = new jsSHA(\"SHA-1\", \"TEXT\");\n    ShaObj.setHMACKey(AppKey, \"TEXT\");\n    ShaObj.update(\"x-date: \" + GMTString);\n    let HMAC = ShaObj.getHMAC(\"B64\");\n    let Authorization =\n        'hmac username=\"' +\n        AppID +\n        '\", algorithm=\"hmac-sha1\", headers=\"x-date\", signature=\"' +\n        HMAC +\n        '\"';\n    return { Authorization: Authorization, \"X-Date\": GMTString };\n};\n\n\nconst requestAPI = (path = \"\", param = {}) => {\n    return fetch(`${apiRoot}${VERSION}${path}?${qs.stringify(param)}`, {\n      method: \"GET\",\n      headers: getAuthorizationHeader(),\n    })\n      .then(async (response) => {\n        if (!response.ok) {\n          const errorMsg = await response.json().then((msg) => msg.Message);\n          // alert\n          throw errorMsg;\n        }\n        return response.json();\n      })\n      .then((data) => data);\n  };\n\nexport default requestAPI;\n\nexport const requesScenicSpot = (city, param) => { //觀光景點\n    const ScenicSpotPath = \"/Tourism/ScenicSpot\";\n\n    if (!city) {\n        return requestAPI(ScenicSpotPath, param);\n    }\n    return requestAPI(`${ScenicSpotPath}/${city}`, param);\n};\n\nexport const requesRestaurant = (city, param) => { //餐廳\n    const RestaurantPath = \"/Tourism/Restaurant\";\n\n    if (!city) {\n        return requestAPI(RestaurantPath, param);\n    }\n    return requestAPI(`${RestaurantPath}/${city}`, param);\n};\n\nexport const requesActivity = (city, param) => { //餐廳\n    const ActivityPath = \"/Tourism/Activity\";\n\n    if (!city) {\n        return requestAPI(ActivityPath, param);\n    }\n    return requestAPI(`${ActivityPath}/${city}`, param);\n};"]},"metadata":{},"sourceType":"module"}